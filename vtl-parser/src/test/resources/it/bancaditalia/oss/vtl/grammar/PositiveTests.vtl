/**
 * Copyright Â© 2020 Banca D'Italia
 *
 * Licensed under the EUPL, Version 1.2 (the "License");
 * You may not use this work except in compliance with the
 * License.
 * You may obtain a copy of the License at:
 *
 * https://joinup.ec.europa.eu/sites/default/files/custom-page/attachment/2020-03/EUPL-1.2%20EN.txt
 *
 * Unless required by applicable law or agreed to in
 * writing, software distributed under the License is
 * distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied.
 *
 * See the License for the specific language governing
 * permissions and limitations under the License.
 */
/* Examples run from reference manual 10/04/2018 */

define datapoint ruleset dpr1 (variable flow, obs_value) is
when flow="CREDIT" or flow="DEBIT" then obs_value >=0 errorcode "bad value"
end datapoint ruleset;

/*NOTE: the following 2 examples are slightly modified than those in the published reference
manual to contain the 'as' in the valuedomain */

define datapoint ruleset DPR_1 ( valuedomain flow_type as A, numeric_value as B ) is
when A = "CREDIT" or A = "DEBIT" then B >= 0 errorcode "Bad value" errorlevel 10
end datapoint ruleset;

define datapoint ruleset DPR_2 ( variable flow as F, obs_value as O) is
when F = "CREDIT" or F = "DEBIT" then O >= 0 errorcode "Bad value"
end datapoint ruleset;

define hierarchical ruleset BeneluxCountriesHierearchy (valuedomain rule Geo_Area) is
BENELUX = BELGIUM + LUXEMBOURG + NETHERLANDS
end hierarchical ruleset;

define hierarchical ruleset BeneluxRuleset (valuedomain rule GeoArea) is
Belgium = Belgium
;Luxembourg = Luxembourg
;Netherlands = Netherlands
;Benelux = Belgium + Luxembourg + Netherlands
end hierarchical ruleset;

define hierarchical ruleset CalcCountryLevel (valuedomain condition Residence rule GeoArea) is
when Residence = "resident" then Country1 = Country1
; when Residence = "non-resident" then Country1 = Region11+Region1M        
; when Residence = "resident" then CountryN = CountryN
; when Residence = "non-resident" then CountryN = RegionN1 + RegionNM
end hierarchical ruleset;

define hierarchical ruleset sex_hr (valuedomain rule sex) is
TOTAL = MALE + FEMALE
end hierarchical ruleset;

define hierarchical ruleset BeneluxCountriesHierarchy (valuedomain rule GeoArea) is
BENELUX = BELGIUM + LUXEMBOURG + NETHERLANDS errorcode "Bad value for Benelux" 
end hierarchical ruleset;

define hierarchical ruleset american_partners_hr (variable rule PartnerArea) is
NORTH_AMERICA > US ;
SOUTH_AMERICA = BR + UY + AR + CL 
end hierarchical ruleset;

define hierarchical ruleset validationruleset_bop (variable rule BoPItem ) is
transport_method1 : Transport  =  AirTransport + SeaTransport + LandTransport ;
transport_method2 : Transport = PassengersTransport + FreightsTransport
end hierarchical ruleset;

define operator max1 (x integer, y integer)
returns boolean is 
if x > y then x else y
end operator;

define operator add (x integer default 0, y integer default 0)
returns number is 
x+y
end operator;

DS_R := ( DS_1  +  DS_2 );

DS_R := ( CMP_1  -  CMP_2 );

DS_R := ( 2  +  DS_1 );

DS_R := ( DS_2   -   3   *  DS_3 );

DS_R := (DS_1 + DS_2) * DS_3;

DS_R := (CMP_1 - CMP_2/(CMP_3+CMP_4))*CMP_5;

DS_r <- DS_1;

DS_r <- DS_1 - DS_2;

DS_r := DS_1;

DS_r := 3;

DS_r := DS_1 - DS_2;

DS_r := 3 + 2;

DS_R := DS_1#COMP_3;

DS_r  := DS_1#Me_1;

DS_r  := DS_1#Id_1 ;

DS_r  := DS_1#At_1;

DS_R := max1 ( 2, 3 );

DS_R := eval ( routine1 ( DS_1 ) );

/* The following examples referring to eval need to be modified in order to match the syntax definition of eval
DS_r := eval( SQL3( DS_1 ) 
returns dataset { identifier geo_area ,
identifier time,
measure obs_value,
attribute obs_status } ) */

DS_r := eval( SQL3( DS_1 ) language "SQL" returns dataset);

DS_r := DS_1[calc Me := eval( f(Me, 1)language "Java" returns integer) ];

ds_r := ds_1[calc me:=eval(f(me) language "Java" returns integer)];

//The following example is slightly modified to remove an extra parenthesis (line 2063 ref. manual)

ds2 := ds1[calc m2 := cast(m1, number, "DD.DDD")+2];

ds2 := ds1[calc m2 := cast(m1, date,"YYYY-MM-DD")];

ds2 := ds1[calc m2 := cast(m1, integer) + 3 ];

ds2 := ds1[calc m2 := length(cast(m1, string)) ];

ds2 := ds1[calc m2 := cast(m1, string,"YY-MON-DAY hh:mm:ss")];

ds2 := ds1[calc m2 := cast(GEO_STRING, GEO_AREA)];

ds2 := ds1[calc m2 := length(GEO_AREA)];

ds2 := ds1 [ calc m2 := cast (GEO, GEO_AREA1) ];

DS_R := inner_join ( ds1 as d1, ds2 as d2 using Id1, Id2 filter d1#Me1 + d2#Me1 <10
apply d1 / d2
keep Me1, Me2, Me3
rename Id1 to Id10, id2 to id20
);

DS_R := left_join ( ds1 as d1, ds2 as d2
filter d1#Me1 + d2#Me1 <10
calc Me1 := d1#Me1 + d2#Me3
keep Me1
rename Id1 to Ident1, Me1 to Meas1
);

DS_R := full_join (ds1 as d1, ds2 as d2
filter d1#Me1 + d2#Me1 <10
aggr Me1:= sum(Me1), attribute At20:=avg(Me2)
group by Id1, Id2
having sum(Me3)>0
);

DS_r := inner_join ( DS_1 as d1, DS_2 as d2 keep Me_1, d2#Me_2, Me_1A);

DS_r := left_join ( DS_1 as d1, DS_2 as d2 keep Me_1, d2#Me_2, Me_1A );

DS_r := full_join ( DS_1 as d1, DS_2 as d2 keep Me_1, d2#Me_2, Me_1A );

DS_r := cross_join (DS_1 as d1, DS_2 as d2 rename d1#Id_1 to Id11, d1#Id_2 to Id12, d2#Id1 to Id21, d2#Id2 to Id22, d1#Me_2 to Me12 );

DS_r := inner_join (DS_1 as d1, DS_2 as d2 filter Me_1 ="A" calc Me_4 := Me_1||Me_1A drop d1#Me_2);

DS_r := inner_join ( DS_1
filter Id_2 ="B" 
calc Me_2 := Me_2 ||"_NEW"
 keep Me_1, Me_2);

DS_r := inner_join ( DS_1 as d1, DS_2 as d2 apply d1 || d2);

DS_R := "Hello" || ", world!";

DS_R := ds_1 || ds_2;

DS_r := DS_1 || DS_2;

DS_r := DS_1[calc Me_2:= Me_1 || "world"];

DS_R := trim("Hello ");

DS_R := trim(ds_1);

DS_r := rtrim(DS_1);

DS_r := DS_1[ calc Me_2:= rtrim(Me_1)];

DS_R := upper("Hello");

DS_R := lower(ds_1);

DS_r := upper(DS_1);

DS_r := DS_1[calc Me_2:= upper(Me_1)];

DS_R := substr (DS_1, 2, 3);

DS_R := substr ( DS_1, 2 );

DS_R := substr ( DS_1, _ , 3 );

DS_R := substr ( DS_1 );

DS_r:= substr ( DS_1 , 7 );

DS_r:= substr ( DS_1 , 1 , 5 );

DS_r:= DS_1 [ calc Me_2:= substr ( Me_2 , 1 , 5 ) ];

DS_R := replace(DS_1, "Hello", "Hi");

DS_R := replace(DS_1, "Hello");

DS_R := replace("Hello world", "Hello", "Hi");

DS_R := replace("Hello world", "Hello");

DS_R := replace ("Hello", "ello", "i");

DS_r := replace (ds_1,"ello","i");

DS_r := DS_1[ calc Me_2:= replace (Me_1,"ello","i")];

DS_R := instr(DS_1, "ab", 2, 3);

DS_R := instr(DS_1, "ab", 2);

DS_R := instr(DS_1, "ab",_,2);

DS_R := instr(DS_1, "ab");

DS_r:= instr(ds_1,"hello");

DS_r := DS_1[calc Me_2:=instr(Me_1,"hello")];

DS_r := DS_2 [calc Me_10:= instr(Me_1, "o" ), Me_20:=instr(Me_2, "o")];

DS_r := instr(DS_2, "o" );

DS_R := length("Hello, World!");

DS_R := length(DS_1);

DS_r := length(DS_1);

DS_r:= DS_1[calc Me_2:=length(Me_1)];

DS_r := DS_2 [calc Me_10:= length(Me_1), Me_20:=length(Me_2)];

DS_r := length(DS_2);

DS_r := + DS_1;

DS_r := DS_1 [calc Me_3 := + Me_1 ];

DS_r := - DS_1;

DS_r := DS_1 [ calc Me_3 := - Me_1 ];

DS_r := DS_1 + DS_2;

DS_r := DS_1 + 3;

DS_r := DS_1 [ calc Me_3 := Me_1 + 3.0 ];

DS_r := DS_1 - DS_2;

DS_r := DS_1 - 3;

DS_r := DS_1 [ calc Me_3 := Me_1 - 3 ];

DS_r := DS_1 * DS_2;

DS_r := DS_1 * -3;

DS_r := DS_1 [ calc Me_3 := Me_1 * Me_2 ];

DS_r := DS_1 / DS_2;

DS_r := DS_1 / 10;

DS_r := DS_1 [ calc Me_3 := Me_2 / Me_1 ];

DS_r := mod ( DS_1, DS_2 );

DS_r := mod ( DS_1, 15 );

DS_r := DS_1[ calc Me_3 := mod( DS_1#Me_1, 3.0 ) ];

DS_r := round(DS_1, 0);

DS_r := DS_1 [ calc Me_10:= round( Me_1)];

DS_r := DS_1 [ calc Me_20:= round( Me_1 , -1 ) ];

DS_r := trunc(DS_1, 0);

DS_r := DS_1[ calc Me_10:= trunc( Me_1 ) ];

DS_r := DS_1[ calc Me_20:= trunc( Me_1 , -1 ) ];

DS_r := ceil (DS_1);

//The following example is modified to include the calc clause in order to successfully run (line 3432)
DS_r := DS_1[calc Me_10 := ceil(Me_1)];

DS_r := floor ( DS_1 );

//The following example is modified to include the calc clause in order to successfully run (line 3478)
DS_r := DS_1 [calc Me_10 := floor (Me_1) ];

DS_r := abs ( DS_1 );

DS_r := DS_1 [ calc Me_10 := abs(Me_1) ];

DS_r := exp(DS_1);

DS_r := DS_1 [ calc Me_1 := exp ( Me_1 ) ];

DS_r := ln(DS_1);

//The following example is modified to include the last bracket in order to successfully run  (line 3617)
DS_r := DS_1 [ calc Me_2 := ln ( DS_1#Me_1 )];

DS_r := power(DS_1, 2);

DS_r := DS_1[ calc Me_1 := power(Me_1, 2) ];

DS_r := log ( DS_1, 2 );

DS_r := DS_1 [ calc Me_1 := log (Me_1, 2) ];

DS_r := sqrt(DS_1);

DS_r := DS_1 [ calc Me_1 := sqrt ( Me_1 ) ];

DS_r := DS_1 = 0.08;

DS_r := DS_1 [ calc Me_2 := Me_1 = 0.08 ];

DS_r := DS_1 <> DS_2;

DS_r := DS_1 [ calc Me_2 := Me_1<>7.5];

DS_r := DS_1 > 20;

DS_r := DS_1 [ calc Me_2 := Me_1 > 20 ];

DS_r:= DS_1 > DS_2;

DS_r := DS_1 < 15000000;

DS_r:= between(ds1, 5,10);

ds2 := ds1 [ calc m1 := between(me2, 5, 10) ];

ds := ds_2 in {1,4,6};

ds := ds_3 in mySet;

ds := ds_3 in myValueDomain;

DS_R := 1 in {1,2,3};

DS_R := "a" in {"c","ab","bb","bc"};

DS_r := DS_1 in { "BS","MO","HH","PP"};

DS_r := DS_1 [ calc Me_2:= Me_1 in {"BS","MO","HH","PP"}];

DS_r := DS_1#Id_2 in myGeoValueDomain;

DS_R := match_characters(ds1, "[abc]+\d\d");

DS_R := ds1 [ calc m1 := match_characters(ds1, "[abc]+\d\d")];

//The following example is modified to include the match_characters operator in order to run (line 4148)
DS_r:= match_characters(ds1, "[:alpha:]{2}[:digit:]{3}");

DS_R := isnull("hello");

DS_R := isnull(NULL);

DS_r := isnull(DS_1);

DS_r := DS_1[ calc Me_2 := isnull(Me_1) ];

DS_R := exists_in ( DS_1, DS_2, true );

DS_R := exists_in ( DS_1, DS_2 );

DS_R := exists_in ( DS_1, DS_2, all );

DS_r := exists_in (DS_1, DS_2, all);

DS_r := exists_in (DS_1, DS_2, true);

DS_r := exists_in (DS_1, DS_2, false);

DS_r:= DS_1 and DS_2;

DS_r := DS_1 [ calc Me_2:= Me_1 and true ];

DS_r:= DS_1 or DS_2;

DS_r:= DS_1 [ calc Me_2:= Me_1 or true ];

DS_r:=DS_1 xor DS_2;

DS_r:= DS_1 [ calc Me_2:= Me_1 xor true ];

DS_r:= not DS_1;

DS_r:= DS_1 [ calc Me_2 := not Me_1 ];

DS_r := period_indicator ( DS_1 );

DS_r := DS_1 [ filter period_indicator ( Id_3 ) = "a"];

DS_r := fill_time_series ( DS_1, single );

DS_r := fill_time_series ( DS_1, all );

DS_r := fill_time_series ( DS_2, single );

DS_r := fill_time_series ( DS_2, all );

DS_r := fill_time_series ( DS_3, single );

DS_r := fill_time_series ( DS_3, all );

DS_r := fill_time_series ( DS_4, single );

DS_r := fill_time_series ( DS_4, all );

DS_r := flow_to_stock ( DS_1 );

DS_r := flow_to_stock ( DS_2 );

DS_r := flow_to_stock ( DS_3 );

DS_r := stock_to_flow ( DS_1 );

DS_r := stock_to_flow ( DS_2 );

DS_r := stock_to_flow ( DS_3 );

DS_r := stock_to_flow ( DS_4 );

/*The following examples are modified to include the correct operator name timeshift in order 
to run (lines 4813, 4821, 4829, 4837) */
DS_r := timeshift(DS_1, -1);

DS_r := timeshift(DS_2, 2);

DS_r := timeshift(DS_3,1);

DS_r := timeshift(DS_3, -1);

//The following example is modified in order to match the time_agg syntax (line 4854)
DS_R := sum ( DS group all time_agg ("A", Me)) ;

DS_R := time_agg("A",cast("2012Q1", time_period, "YYYY\Qq"));

DS_R := time_agg("M", cast("2012-12-23",date,"YYYY-MM-DD"));

DS_R := time_agg("M", DS1);

ds_2 := ds1[calc Me1 := time_agg("M",Me1)];

DS_r := sum ( DS_1 group all time_agg ( "A",_,Me_1));

//The following example is modified to remove a space inside keyword time_agg (line 4909)
DS_r := time_agg ("Q", cast("2012M01",time_period, "YYYY\MMM"));

/*The following two examples need to be modified in order to match the syntax definition (lines 4915, 4921)
DS_R := time_agg( "Q", cast("20120213", date, "YYYYMMDD"), _ , false );
DS_R := time_agg(cast( "A", "2012M1", date, "YYYYMMDD"), _, true ) */

DS_R := cast(current_date(), string, "YYYY.MM.DD");

DS_r := union(DS_1,DS_2);

DS_r := intersect(DS_1,DS_2);

DS_r := setdiff ( DS_1, DS_2 );

DS_r := symdiff ( DS_1, DS_2 );

DS_R := hierarchy ( DS1, HR1  rule Id_1 non_null all );

DS_R := hierarchy ( DS2, HR2  condition Comp_1, Comp_2 rule Id_3 non_zero rule computed );

DS_r := hierarchy ( DS_1, HR_1 rule Id_2 non_null );

DS_r := hierarchy ( DS_1, HR_1 rule Id_2 non_zero );

DS_r := hierarchy ( DS_1, HR_1 rule Id_2 partial_null );

DS_R := avg(DS_1);

DS_R := avg ( DS_1 group by Id_1, Id_2 );

DS_R := avg ( DS_1 group except Id_1, Id_2 );

DS_R := avg ( DS_1 group all time_agg ("Q"));

DS_r := avg ( DS_1 group by Id_1 );

DS_r := avg ( DS_1 group except Id_2, Id_3 );

DS_r := avg ( DS_1#Me_1 group by Id_1 );

DS_r := sum ( DS_1 group by Id_1, Id_3 );

DS_r := avg ( DS_1 );

DS_r := DS_1 [ aggr Me_2 := max ( Me_1 ) , Me_3 := min ( Me_1 ) group by Id_1 ];

DS_R := sum ( DS_1 over ( partition by Id_1 order by Id_2 ) );

DS_R := sum ( DS_1 over ( order by Id_2 ) );

DS_R := avg ( DS_1 over ( order by Id_1 data points between 1 preceding and 1 following ) );

DS_R := DS_1 [ calc M1 := sum ( Me_1 over ( order by Id_1 ) ) ];

DS_r := sum ( DS_1 over ( order by Id_1, Id_2, Id_3 data points between 1 preceding and 1 following ) );

DS_r := count ( DS_1 group by Id_1 );

DS_r := sum ( DS_1 group by Id_1 having count() > 2 );

DS_r := min ( DS_1 group by Id_1 );

DS_r := max ( DS_1 group by Id_1 );

DS_r := median ( DS_1 group by Id_1 );

DS_r := sum ( DS_1 group by Id_1 );

DS_r := avg ( DS_1 group by Id_1 );

DS_r := stddev_pop ( DS_1 group by Id_1 );

DS_r := stddev_samp ( DS_1 group by Id_1 );

DS_r := var_pop ( DS_1 group by Id_1 );

//In the following example '[' and ']' were removed in order to run (line 6011)
DS_r := var_samp ( DS_1 group by Id_1);

DS_r := first_value ( DS_1 over ( partition by Id_1, Id_2 order by Id_3 data points between 1 preceding and 1 following));

DS_r := last_value ( DS_1 over ( partition by Id_1, Id_2 order by Id_3 data points between 1 preceding and 1 following));

DS_r := lag ( DS_1 , 1 over ( partition by Id_1 , Id_2 order by Id_3 ) );

DS_r := lead ( DS_1 , 1 over ( partition by Id_1 , Id_2 order by Id_3 ) );

DS_r := DS_1 [ calc Me2 := rank ( over ( partition by Id_1 , Id_2 order by Me_1 ) )];

DS_r := ratio_to_report ( DS_1 over ( partition by Id_1, Id_2 ) );

DS_R := check_datapoint ( DS1, DPR invalid );

DS_R := check_datapoint ( DS1, DPR all_measures );

DS_r := check_datapoint ( DS_1, dpr1 );

DS_r := check_datapoint ( DS_1, dpr1 all );

DS_R := check_hierarchy ( DS1, HR_2  non_null  dataset  invalid );

DS_R := check_hierarchy ( DS1, HR_3  non_zero dataset_priority  all );

DS_r := check_hierarchy ( DS_1, HR_1 rule Id_2 partial_null all );

//The following example is modified to place errorcode and errormessage in quotes (line 6572)
DS_R := check ( DS1 > DS2 errorcode "myerrorcode" errorlevel "myerrorlevel" imbalance DS1 - DS2 invalid );

DS_r := check ( DS1 >= DS2 imbalance DS1 - DS2 );

DS_R := if x1 > x2 then 2 else 5;

DS_r := if ( DS_cond#Id_4 = "F" ) then DS_1 else DS_2;

DS_R := nvl ( ds1#m1, 0 );

DS_R := nvl ( 5, 0 );

DS_R := nvl ( null, 0 );

DS_r := nvl ( DS_1, 0 );

DS_R := DS_1 [ filter Me_3 > 0 ];

DS_R := DS_1 [ filter Me_3 + Me_2 <= 0 ];

DS_r := DS_1 [ filter Id_1 = 1 and Me_1 < 10 ];

DS_R := DS_1 [ calc Me_3 := Me_1 + Me_2 ];

DS_r := DS_1 [ calc Me_1:= Me_1 * 2 ];

DS_r := DS_1 [ calc attribute At_1:= "EP"];

DS_R := DS_1 [ aggr M1 := min ( Me_1 ) group by Id_1, Id_2 ];

DS_R := DS_1 [ aggr M1 := min ( Me_1 ) group except Id_1, Id_2 ];

DS_r := DS_1 [ aggr Me_1:= sum( Me_1 ) group by Id_1 , Id_2 ];

DS_r := DS_1 [ aggr Me_3:= min( Me_1 ) group except Id_3 ];

DS_r := DS_1 [ aggr Me_1:= sum( Me_1 ), Me_2 := max( Me_1) group by Id_1 , Id_2
having median (Me_1 ) > 2 ];

DS_R := DS_1 [ keep Me_2, Me_3 ];

DS_r := DS_1 [ keep Me_1 ];

DS_R := DS_1 [ drop Me_2, Me_3 ];

DS_r := DS_1 [ drop At_1 ];

DS_R := DS_1 [ rename Me_2 to Me_3 ];

DS_r := DS_1 [ rename Me_1 to Me_2, At_1 to At_2];

DS_R := DS_1 [ pivot Id_2, Me_1 ];

DS_r := Ds_1 [ pivot Id_2, Me_1 ];

DS_R := DS [ unpivot Id_5, Me_3 ];

DS_r := DS_1 [ unpivot Id_2, Me_1];

//The following example was modified to add the operator 'sub' in order to run (line 7201)
DS_r := DS_1 [sub Id_2 = "A", Id_5 = 1 ];

DS_r := DS_1 [ sub Id_1 = 1, Id_2 = "A"];

DS_r := DS_1 [ sub Id_1 = 1, Id_2 = "B", Id_3 = "YY"];

DS_r := DS_1 [sub Id_2 ="A"] + DS_1 [sub Id_2 ="B"];
